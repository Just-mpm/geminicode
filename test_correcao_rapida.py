#!/usr/bin/env python3
"""
Teste r√°pido para verificar se a corre√ß√£o do file_manager funcionou
"""

import asyncio
import sys
import os
from pathlib import Path

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

async def test_architectural_reasoning():
    """Testa se o ArchitecturalReasoning inicializa corretamente."""
    print("üîß Testando ArchitecturalReasoning...")
    
    try:
        # Define API key de teste
        os.environ['GEMINI_API_KEY'] = 'test-key-for-test'
        
        from gemini_code.core.gemini_client import GeminiClient
        from gemini_code.core.project_manager import ProjectManager
        from gemini_code.cognition.architectural_reasoning import ArchitecturalReasoning
        
        # Inicializa componentes
        client = GeminiClient()
        pm = ProjectManager(".")
        
        # Testa inicializa√ß√£o do ArchitecturalReasoning
        ar = ArchitecturalReasoning(client, pm)
        
        print("‚úÖ ArchitecturalReasoning inicializado com sucesso!")
        print(f"‚úÖ CodeNavigator criado: {ar.code_navigator is not None}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_master_system():
    """Testa se o MasterSystem inicializa corretamente."""
    print("\nüöÄ Testando MasterSystem...")
    
    try:
        from gemini_code.core.master_system import GeminiCodeMasterSystem
        
        # Cria inst√¢ncia
        master = GeminiCodeMasterSystem(".")
        
        # Testa inicializa√ß√£o
        await master._initialize_config()
        print("‚úÖ Config inicializada")
        
        await master._initialize_core_systems()
        print("‚úÖ Core systems inicializados")
        
        await master._initialize_tools_and_security()
        print("‚úÖ Tools & security inicializados")
        
        await master._initialize_advanced_features()
        print("‚úÖ Advanced features inicializados")
        
        return True
        
    except Exception as e:
        error_str = str(e)
        if "API_KEY_INVALID" in error_str or "API key not valid" in error_str:
            print("‚úÖ Inicializa√ß√£o OK (falha esperada por API key)")
            return True
        else:
            print(f"‚ùå Erro: {e}")
            return False

async def main():
    """Executa os testes."""
    print("üß™ TESTE R√ÅPIDO DE CORRE√á√ÉO")
    print("="*50)
    
    test1 = await test_architectural_reasoning()
    test2 = await test_master_system()
    
    print("\n" + "="*50)
    if test1 and test2:
        print("üéâ CORRE√á√ÉO FUNCIONOU! Sistema OK!")
        return True
    else:
        print("‚ùå Ainda h√° problemas a corrigir")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)