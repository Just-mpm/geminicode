"""
Approval System - Sistema de aprova√ß√£o interativa estilo Claude Code
"""

import asyncio
from typing import Dict, Any, List, Optional, Callable
from datetime import datetime, timedelta
from enum import Enum

from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm, Prompt
from rich.text import Text
from rich.table import Table

from .permission_manager import PermissionRequest, PermissionDecision, PermissionLevel, OperationType


class ApprovalResponse(Enum):
    """Respostas poss√≠veis para solicita√ß√£o de aprova√ß√£o."""
    ALLOW = "allow"
    DENY = "deny"
    ALLOW_ONCE = "allow_once"
    ALLOW_SESSION = "allow_session"
    ALLOW_FOREVER = "allow_forever"
    DENY_FOREVER = "deny_forever"


class InteractiveApprovalSystem:
    """
    Sistema de aprova√ß√£o interativa que replica o comportamento do Claude Code.
    """
    
    def __init__(self):
        self.console = Console()
        self.approval_history: List[Dict[str, Any]] = []
        
        # Templates de mensagens por tipo de opera√ß√£o
        self.approval_messages = {
            OperationType.EXECUTE_COMMAND: "executar comando shell",
            OperationType.WRITE_FILE: "escrever arquivo",
            OperationType.DELETE_FILE: "deletar arquivo",
            OperationType.NETWORK_ACCESS: "acessar rede",
            OperationType.SYSTEM_MODIFY: "modificar sistema",
            OperationType.PROCESS_SPAWN: "criar novo processo"
        }
        
        # √çcones de risco
        self.risk_icons = {
            "low": "üü¢",
            "medium": "üü°", 
            "high": "üü†",
            "critical": "üî¥"
        }
    
    async def request_approval(self, request: PermissionRequest, level: PermissionLevel) -> PermissionDecision:
        """
        Solicita aprova√ß√£o interativa do usu√°rio.
        """
        
        # Mostra informa√ß√µes da solicita√ß√£o
        self._show_permission_request(request)
        
        # Determina op√ß√µes dispon√≠veis baseado no n√≠vel
        options = self._get_approval_options(level, request)
        
        # Solicita decis√£o do usu√°rio
        response = await self._get_user_response(options, request)
        
        # Converte resposta em decis√£o
        decision = self._convert_response_to_decision(response, request)
        
        # Registra no hist√≥rico
        self._log_approval(request, decision, response)
        
        return decision
    
    def _show_permission_request(self, request: PermissionRequest):
        """Exibe solicita√ß√£o de permiss√£o de forma clara."""
        
        # Cabe√ßalho
        risk_icon = self.risk_icons.get(request.risk_level, "‚ö™")
        operation_desc = self.approval_messages.get(request.operation_type, "executar opera√ß√£o")
        
        title = f"{risk_icon} Solicita√ß√£o de Permiss√£o - {request.tool_name}"
        
        # Conte√∫do da solicita√ß√£o
        content_lines = [
            f"**Opera√ß√£o:** {operation_desc}",
            f"**Recurso:** `{request.resource}`",
            f"**Descri√ß√£o:** {request.description}",
            f"**N√≠vel de Risco:** {request.risk_level.upper()} {risk_icon}",
        ]
        
        # Adiciona contexto se dispon√≠vel
        if request.user_context:
            if 'file_size' in request.user_context:
                content_lines.append(f"**Tamanho:** {request.user_context['file_size']} bytes")
            if 'command_args' in request.user_context:
                content_lines.append(f"**Argumentos:** {request.user_context['command_args']}")
        
        content = "\\n".join(content_lines)
        
        # Avisos especiais baseados no risco
        if request.risk_level == "critical":
            content += "\\n\\n‚ö†Ô∏è  **ATEN√á√ÉO: Opera√ß√£o de alto risco detectada!**"
        elif request.risk_level == "high":
            content += "\\n\\n‚ö†Ô∏è  **Cuidado: Esta opera√ß√£o pode ser perigosa**"
        
        # Mostra painel
        panel = Panel(
            content,
            title=title,
            border_style="yellow" if request.risk_level in ["high", "critical"] else "blue",
            padding=(1, 2)
        )
        
        self.console.print("\\n")
        self.console.print(panel)
    
    def _get_approval_options(self, level: PermissionLevel, request: PermissionRequest) -> List[ApprovalResponse]:
        """Determina op√ß√µes de aprova√ß√£o baseado no n√≠vel de permiss√£o."""
        
        base_options = [ApprovalResponse.ALLOW, ApprovalResponse.DENY]
        
        if level == PermissionLevel.ASK_ONCE:
            return base_options + [ApprovalResponse.ALLOW_FOREVER, ApprovalResponse.DENY_FOREVER]
        
        elif level == PermissionLevel.ASK_UNTIL_SESSION_END:
            return base_options + [ApprovalResponse.ALLOW_SESSION]
        
        elif level == PermissionLevel.ASK_ALWAYS:
            if request.risk_level in ["low", "medium"]:
                return base_options + [ApprovalResponse.ALLOW_SESSION, ApprovalResponse.ALLOW_FOREVER]
            else:
                return base_options + [ApprovalResponse.ALLOW_ONCE]
        
        return base_options
    
    async def _get_user_response(self, options: List[ApprovalResponse], request: PermissionRequest) -> ApprovalResponse:
        """Solicita resposta do usu√°rio."""
        
        # Cria tabela de op√ß√µes
        table = Table(title="Op√ß√µes Dispon√≠veis", show_header=True, header_style="bold blue")
        table.add_column("Op√ß√£o", style="cyan", width=12)
        table.add_column("Descri√ß√£o", style="white")
        table.add_column("Dura√ß√£o", style="green")
        
        option_map = {
            ApprovalResponse.ALLOW: ("‚úÖ Permitir", "Permite esta opera√ß√£o", "Uma vez"),
            ApprovalResponse.DENY: ("‚ùå Negar", "Nega esta opera√ß√£o", "Uma vez"),
            ApprovalResponse.ALLOW_ONCE: ("üü¢ Permitir", "Permite apenas desta vez", "Uma vez"),
            ApprovalResponse.ALLOW_SESSION: ("üîµ Permitir", "Permite at√© fim da sess√£o", "Sess√£o atual"),
            ApprovalResponse.ALLOW_FOREVER: ("‚úÖ Sempre", "Sempre permite para este recurso", "Permanente"),
            ApprovalResponse.DENY_FOREVER: ("‚ùå Nunca", "Nunca permite para este recurso", "Permanente")
        }
        
        # Mapeia op√ß√µes para n√∫meros
        option_numbers = {}
        for i, option in enumerate(options, 1):
            desc, explanation, duration = option_map[option]
            table.add_row(f"[{i}]", desc, explanation, duration)
            option_numbers[str(i)] = option
        
        self.console.print(table)
        self.console.print()
        
        # Solicita escolha
        while True:
            try:
                choice = Prompt.ask(
                    "Escolha uma op√ß√£o",
                    choices=list(option_numbers.keys()),
                    default="1"
                )
                
                return option_numbers[choice]
                
            except KeyboardInterrupt:
                return ApprovalResponse.DENY
            except Exception:
                self.console.print("[red]Op√ß√£o inv√°lida. Tente novamente.[/red]")
                continue
    
    def _convert_response_to_decision(self, response: ApprovalResponse, request: PermissionRequest) -> PermissionDecision:
        """Converte resposta do usu√°rio em decis√£o de permiss√£o."""
        
        if response == ApprovalResponse.ALLOW:
            return PermissionDecision(
                granted=True,
                reason="user_approved"
            )
        
        elif response == ApprovalResponse.DENY:
            return PermissionDecision(
                granted=False,
                reason="user_denied"
            )
        
        elif response == ApprovalResponse.ALLOW_ONCE:
            return PermissionDecision(
                granted=True,
                reason="user_approved_once",
                expires_at=datetime.now() + timedelta(minutes=5)
            )
        
        elif response == ApprovalResponse.ALLOW_SESSION:
            return PermissionDecision(
                granted=True,
                reason="user_approved_session",
                expires_at=datetime.now() + timedelta(hours=24)  # Dura√ß√£o da sess√£o
            )
        
        elif response == ApprovalResponse.ALLOW_FOREVER:
            return PermissionDecision(
                granted=True,
                remember_choice=True,
                reason="user_approved_forever"
            )
        
        elif response == ApprovalResponse.DENY_FOREVER:
            return PermissionDecision(
                granted=False,
                remember_choice=True,
                reason="user_denied_forever"
            )
        
        else:
            # Fallback - nega por seguran√ßa
            return PermissionDecision(
                granted=False,
                reason="unknown_response"
            )
    
    def _log_approval(self, request: PermissionRequest, decision: PermissionDecision, response: ApprovalResponse):
        """Registra aprova√ß√£o no hist√≥rico."""
        log_entry = {
            'timestamp': datetime.now(),
            'operation_type': request.operation_type.value,
            'resource': request.resource,
            'tool_name': request.tool_name,
            'risk_level': request.risk_level,
            'user_response': response.value,
            'granted': decision.granted,
            'remember_choice': decision.remember_choice,
            'session_id': request.session_id
        }
        
        self.approval_history.append(log_entry)
        
        # Mant√©m hist√≥rico limitado
        if len(self.approval_history) > 100:
            self.approval_history = self.approval_history[-100:]
    
    def show_approval_summary(self, request: PermissionRequest, decision: PermissionDecision):
        """Mostra resumo da decis√£o tomada."""
        
        if decision.granted:
            icon = "‚úÖ"
            status = "[green]PERMITIDO[/green]"
            color = "green"
        else:
            icon = "‚ùå"
            status = "[red]NEGADO[/red]"
            color = "red"
        
        summary_text = f"{icon} {status}"
        
        if decision.remember_choice:
            summary_text += " [dim](salvo permanentemente)[/dim]"
        elif decision.expires_at:
            if decision.expires_at > datetime.now() + timedelta(hours=1):
                summary_text += " [dim](v√°lido at√© fim da sess√£o)[/dim]"
            else:
                summary_text += " [dim](v√°lido por alguns minutos)[/dim]"
        
        panel = Panel(
            summary_text,
            title=f"Decis√£o - {request.tool_name}",
            border_style=color,
            padding=(0, 1)
        )
        
        self.console.print(panel)
        self.console.print()
    
    def get_approval_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas de aprova√ß√µes."""
        if not self.approval_history:
            return {
                'total_requests': 0,
                'approvals': 0,
                'denials': 0,
                'approval_rate': 0.0
            }
        
        total = len(self.approval_history)
        approved = sum(1 for entry in self.approval_history if entry['granted'])
        denied = total - approved
        
        # Estat√≠sticas por ferramenta
        tool_stats = {}
        for entry in self.approval_history:
            tool = entry['tool_name']
            if tool not in tool_stats:
                tool_stats[tool] = {'requests': 0, 'approved': 0}
            
            tool_stats[tool]['requests'] += 1
            if entry['granted']:
                tool_stats[tool]['approved'] += 1
        
        # Estat√≠sticas por n√≠vel de risco
        risk_stats = {}
        for entry in self.approval_history:
            risk = entry['risk_level']
            if risk not in risk_stats:
                risk_stats[risk] = {'requests': 0, 'approved': 0}
            
            risk_stats[risk]['requests'] += 1
            if entry['granted']:
                risk_stats[risk]['approved'] += 1
        
        return {
            'total_requests': total,
            'approvals': approved,
            'denials': denied,
            'approval_rate': (approved / total) * 100,
            'tool_stats': tool_stats,
            'risk_stats': risk_stats,
            'recent_requests': self.approval_history[-10:]  # √öltimas 10
        }
    
    def clear_approval_history(self):
        """Limpa hist√≥rico de aprova√ß√µes."""
        self.approval_history.clear()


class BatchApprovalSystem:
    """
    Sistema para aprova√ß√£o em lote de m√∫ltiplas opera√ß√µes.
    """
    
    def __init__(self, interactive_system: InteractiveApprovalSystem):
        self.interactive = interactive_system
        self.console = Console()
    
    async def request_batch_approval(self, requests: List[PermissionRequest]) -> List[PermissionDecision]:
        """Solicita aprova√ß√£o para m√∫ltiplas opera√ß√µes."""
        
        # Mostra resumo das opera√ß√µes
        self._show_batch_summary(requests)
        
        # Op√ß√µes de aprova√ß√£o em lote
        batch_options = [
            "approve_all", "deny_all", "approve_safe", "review_each"
        ]
        
        choice = Prompt.ask(
            "Como deseja proceder?",
            choices=batch_options,
            default="review_each"
        )
        
        if choice == "approve_all":
            return [PermissionDecision(granted=True, reason="batch_approved") for _ in requests]
        
        elif choice == "deny_all":
            return [PermissionDecision(granted=False, reason="batch_denied") for _ in requests]
        
        elif choice == "approve_safe":
            decisions = []
            for request in requests:
                if request.risk_level in ["low", "medium"]:
                    decisions.append(PermissionDecision(granted=True, reason="batch_safe_approved"))
                else:
                    decision = await self.interactive.request_approval(request, PermissionLevel.ASK_ALWAYS)
                    decisions.append(decision)
            return decisions
        
        else:  # review_each
            decisions = []
            for i, request in enumerate(requests, 1):
                self.console.print(f"\\n[bold]Opera√ß√£o {i} de {len(requests)}:[/bold]")
                decision = await self.interactive.request_approval(request, PermissionLevel.ASK_ALWAYS)
                decisions.append(decision)
            return decisions
    
    def _show_batch_summary(self, requests: List[PermissionRequest]):
        """Mostra resumo das opera√ß√µes em lote."""
        table = Table(title=f"Aprova√ß√£o em Lote - {len(requests)} opera√ß√µes", show_header=True)
        table.add_column("Ferramenta", style="cyan")
        table.add_column("Opera√ß√£o", style="white")
        table.add_column("Recurso", style="yellow")
        table.add_column("Risco", style="red")
        
        for request in requests:
            risk_icon = self.interactive.risk_icons.get(request.risk_level, "‚ö™")
            table.add_row(
                request.tool_name,
                request.operation_type.value,
                request.resource[:50] + "..." if len(request.resource) > 50 else request.resource,
                f"{request.risk_level} {risk_icon}"
            )
        
        self.console.print("\\n")
        self.console.print(table)
        self.console.print()


# Inst√¢ncia global do sistema de aprova√ß√£o
_global_approval_system: Optional[InteractiveApprovalSystem] = None


def get_approval_system() -> InteractiveApprovalSystem:
    """Obt√©m inst√¢ncia global do sistema de aprova√ß√£o."""
    global _global_approval_system
    
    if _global_approval_system is None:
        _global_approval_system = InteractiveApprovalSystem()
    
    return _global_approval_system