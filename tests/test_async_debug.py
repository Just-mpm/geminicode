#!/usr/bin/env python3
"""
Teste ass√≠ncrono para debugar problema de inicializa√ß√£o
"""

import asyncio
import sys
from pathlib import Path

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

from gemini_code.core.master_system import GeminiCodeMasterSystem


async def test_async_init():
    """Testa inicializa√ß√£o ass√≠ncrona passo a passo."""
    print("üîç TESTANDO INICIALIZA√á√ÉO ASS√çNCRONA")
    print("=" * 50)
    
    try:
        system = GeminiCodeMasterSystem()
        print("‚úÖ Sistema criado")
        
        # Testa cada passo da inicializa√ß√£o
        print("\n1. Inicializando configura√ß√£o...")
        await system._initialize_config()
        print("‚úÖ Configura√ß√£o OK")
        
        print("\n2. Inicializando sistemas centrais...")
        await system._initialize_core_systems()
        print("‚úÖ Sistemas centrais OK")
        
        print("\n3. Inicializando ferramentas e seguran√ßa...")
        await system._initialize_tools_and_security()
        print("‚úÖ Ferramentas e seguran√ßa OK")
        
        print("\n4. Inicializando funcionalidades avan√ßadas...")
        await system._initialize_advanced_features()
        print("‚úÖ Funcionalidades avan√ßadas OK")
        
        print("\n5. Inicializando funcionalidades empresariais...")
        await system._initialize_enterprise_features()
        print("‚úÖ Funcionalidades empresariais OK")
        
        print("\n6. Inicializando monitoramento...")
        await system._initialize_monitoring()
        print("‚úÖ Monitoramento OK")
        
        print("\n7. Inicializando interface...")
        await system._initialize_interface()
        print("‚úÖ Interface OK")
        
        print("\n8. Verificando componentes...")
        components = {
            'gemini_client': system.gemini_client,
            'project_manager': system.project_manager,
            'memory_system': system.memory_system,
            'tool_registry': system.tool_registry,
            'permission_manager': system.permission_manager,
            'session_manager': system.session_manager,
            'command_parser': system.command_parser,
            'context_compactor': system.context_compactor,
            'mcp_client': system.mcp_client,
            'health_monitor': system.health_monitor,
            'error_detector': system.error_detector,
            'repl': system.repl
        }
        
        for name, component in components.items():
            status = "‚úÖ" if component is not None else "‚ùå"
            print(f"  {status} {name}")
        
        print(f"\nüéØ Sistema inicializado: {system.is_initialized}")
        
        return system
        
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return None


async def main():
    system = await test_async_init()
    
    if system:
        print("\n‚úÖ INICIALIZA√á√ÉO MANUAL SUCESSO!")
        
        # Agora testa a inicializa√ß√£o completa
        print("\nüîÑ Testando inicializa√ß√£o completa...")
        try:
            result = await system.initialize()
            print(f"‚úÖ Inicializa√ß√£o completa: {result}")
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o completa: {e}")
            import traceback
            traceback.print_exc()
    else:
        print("\n‚ùå FALHA NA INICIALIZA√á√ÉO MANUAL")


if __name__ == "__main__":
    asyncio.run(main())
