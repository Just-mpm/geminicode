"""
Teste r√°pido para verificar componentes principais do sistema
"""

import sys
import os
from pathlib import Path

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

print("üîç Verificando componentes do Gemini Code...\n")

# 1. Verifica imports b√°sicos
print("1Ô∏è‚É£ Verificando imports...")
try:
    from gemini_code.core.config import ConfigManager
    print("‚úÖ ConfigManager")
except Exception as e:
    print(f"‚ùå ConfigManager: {e}")

try:
    from gemini_code.core.gemini_client import GeminiClient
    print("‚úÖ GeminiClient")
except Exception as e:
    print(f"‚ùå GeminiClient: {e}")

try:
    from gemini_code.core.project_manager import ProjectManager
    print("‚úÖ ProjectManager")
except Exception as e:
    print(f"‚ùå ProjectManager: {e}")

try:
    from gemini_code.core.memory_system import MemorySystem
    print("‚úÖ MemorySystem")
except Exception as e:
    print(f"‚ùå MemorySystem: {e}")

try:
    from gemini_code.tools.tool_registry import ToolRegistry
    print("‚úÖ ToolRegistry")
except Exception as e:
    print(f"‚ùå ToolRegistry: {e}")

# 2. Verifica m√≥dulos de cogni√ß√£o
print("\n2Ô∏è‚É£ Verificando m√≥dulos de cogni√ß√£o...")
try:
    from gemini_code.cognition.architectural_reasoning import ArchitecturalReasoning
    print("‚úÖ ArchitecturalReasoning")
except Exception as e:
    print(f"‚ùå ArchitecturalReasoning: {e}")

try:
    from gemini_code.cognition.complexity_analyzer import ComplexityAnalyzer
    print("‚úÖ ComplexityAnalyzer")
except Exception as e:
    print(f"‚ùå ComplexityAnalyzer: {e}")

try:
    from gemini_code.cognition.learning_engine import LearningEngine
    print("‚úÖ LearningEngine")
except Exception as e:
    print(f"‚ùå LearningEngine: {e}")

# 3. Testa inicializa√ß√£o b√°sica
print("\n3Ô∏è‚É£ Testando inicializa√ß√µes b√°sicas...")

# Config
try:
    config = ConfigManager()
    print("‚úÖ ConfigManager inicializado")
except Exception as e:
    print(f"‚ùå ConfigManager init: {e}")

# Gemini Client (sem API key vai falhar, mas √© esperado)
try:
    os.environ['GEMINI_API_KEY'] = 'test-key'
    client = GeminiClient()
    print("‚úÖ GeminiClient inicializado (modo teste)")
except Exception as e:
    if "chave inv√°lida" in str(e) or "API Key" in str(e):
        print("‚ö†Ô∏è GeminiClient: Precisa de API key v√°lida (esperado)")
    else:
        print(f"‚ùå GeminiClient init: {e}")

# Project Manager
try:
    pm = ProjectManager(".")
    print("‚úÖ ProjectManager inicializado")
    stats = pm.get_project_stats()
    print(f"   üìÅ Arquivos no projeto: {stats['total_files']}")
except Exception as e:
    print(f"‚ùå ProjectManager init: {e}")

# 4. Verifica se h√° erros de importa√ß√£o circular
print("\n4Ô∏è‚É£ Verificando master_system...")
try:
    from gemini_code.core.master_system import GeminiCodeMasterSystem
    print("‚úÖ GeminiCodeMasterSystem importado")
    
    # Tenta criar inst√¢ncia (sem inicializar)
    master = GeminiCodeMasterSystem(".")
    print("‚úÖ GeminiCodeMasterSystem instanciado")
    print(f"   üì¶ Vers√£o: {master.version}")
except Exception as e:
    print(f"‚ùå GeminiCodeMasterSystem: {e}")
    import traceback
    traceback.print_exc()

print("\n‚ú® Verifica√ß√£o conclu√≠da!")
print("\nüí° Dica: Se houver erros de import, verifique:")
print("   - Depend√™ncias instaladas (requirements.txt)")
print("   - Estrutura de diret√≥rios")
print("   - Importa√ß√µes circulares")
