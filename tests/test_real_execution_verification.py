#!/usr/bin/env python3
"""
üîç TESTE DE VERIFICA√á√ÉO DE EXECU√á√ÉO REAL - SEM SIMULA√á√ÉO
Garante que o Gemini Code REALMENTE executa comandos f√≠sicos no sistema
Testa linguagem natural extensa e complexa
"""

import asyncio
import tempfile
import shutil
import os
import sys
import time
import json
import hashlib
from pathlib import Path
from datetime import datetime
from unittest.mock import Mock, AsyncMock
import subprocess

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent))

from gemini_code.interface.enhanced_chat_interface import EnhancedChatInterface
from gemini_code.core.autonomous_executor import AutonomousExecutor


class RealExecutionVerifier:
    """üîç Verificador de execu√ß√£o real - SEM simula√ß√µes."""
    
    def __init__(self):
        self.temp_workspace = None
        self.verification_results = []
        
    def setup_test_workspace(self):
        """Cria workspace para testes reais."""
        self.temp_workspace = tempfile.mkdtemp()
        print(f"üìÅ Workspace criado: {self.temp_workspace}")
        return self.temp_workspace
    
    def create_real_gemini_client(self):
        """Cria mock que simula respostas inteligentes mas N√ÉO executa comandos."""
        client = Mock()
        
        async def intelligent_response(prompt, **kwargs):
            """Respostas inteligentes baseadas no contexto."""
            prompt_lower = prompt.lower()
            
            if "create" in prompt_lower or "crie" in prompt_lower:
                return """
Entendi seu pedido! Vou criar o que voc√™ solicitou.

## A√ß√£o Realizada:
‚úÖ Comando processado e executado
‚úÖ Estruturas criadas conforme solicitado
‚úÖ Valida√ß√£o conclu√≠da

Se voc√™ verificar o sistema de arquivos, encontrar√° os itens criados.
"""
            
            elif "complex" in prompt_lower or "completo" in prompt_lower:
                return """
Comando complexo processado com sucesso!

## Opera√ß√µes Realizadas:
‚úÖ An√°lise completa do contexto
‚úÖ Execu√ß√£o de m√∫ltiplas etapas
‚úÖ Valida√ß√£o de cada componente
‚úÖ Integra√ß√£o entre sistemas

Sistema est√° funcionando conforme esperado.
"""
            
            else:
                return "Comando processado. Sistema operacional atualizado conforme solicitado."
        
        client.generate_response = AsyncMock(side_effect=intelligent_response)
        return client

    async def test_physical_folder_creation(self):
        """üéØ TESTE 1: Cria√ß√£o f√≠sica de pastas - VERIFICA√á√ÉO REAL."""
        print("\n" + "="*70)
        print("üéØ TESTE 1: CRIA√á√ÉO F√çSICA DE PASTAS")
        print("="*70)
        print("üîç Verificando se pastas s√£o REALMENTE criadas no sistema...")
        
        # Setup
        client = self.create_real_gemini_client()
        chat = EnhancedChatInterface(client, Mock(), Mock(), self.temp_workspace)
        
        test_cases = [
            {
                'command': 'Crie uma pasta chamada projeto_real',
                'expected_folder': 'projeto_real'
            },
            {
                'command': 'Quero que voc√™ fa√ßa uma pasta para guardar documentos importantes',
                'expected_folder': 'documentos'  # ou similar
            },
            {
                'command': 'Por favor, crie um diret√≥rio novo chamado backup_sistema',
                'expected_folder': 'backup_sistema'
            }
        ]
        
        results = []
        
        for i, test in enumerate(test_cases, 1):
            print(f"\nüìù {i}. Comando: '{test['command']}'")
            
            # Verificar estado ANTES
            before_folders = set(p.name for p in Path(self.temp_workspace).iterdir() if p.is_dir())
            print(f"   üìÇ Pastas antes: {before_folders}")
            
            # Executar comando
            simple_intent = await chat._identify_simple_execution_intent(test['command'])
            
            if simple_intent and simple_intent['type'] == 'create_folder':
                await chat._handle_simple_execution_command(test['command'], simple_intent)
                
                # Verificar estado DEPOIS
                after_folders = set(p.name for p in Path(self.temp_workspace).iterdir() if p.is_dir())
                print(f"   üìÇ Pastas depois: {after_folders}")
                
                # Calcular diferen√ßa
                new_folders = after_folders - before_folders
                print(f"   üÜï Novas pastas: {new_folders}")
                
                # Verificar se pasta foi realmente criada
                folder_created = len(new_folders) > 0
                
                if folder_created:
                    created_folder = list(new_folders)[0]
                    folder_path = Path(self.temp_workspace) / created_folder
                    
                    # VERIFICA√á√ÉO F√çSICA REAL
                    exists = folder_path.exists()
                    is_dir = folder_path.is_dir()
                    can_write = os.access(folder_path, os.W_OK)
                    
                    print(f"   ‚úÖ VERIFICA√á√ÉO F√çSICA:")
                    print(f"      - Existe no sistema: {exists}")
                    print(f"      - √â diret√≥rio: {is_dir}")
                    print(f"      - Permiss√£o de escrita: {can_write}")
                    
                    # Testar escrita REAL
                    try:
                        test_file = folder_path / "teste_real.txt"
                        test_file.write_text("Arquivo criado pelo teste real")
                        file_created = test_file.exists()
                        print(f"      - Pode criar arquivos: {file_created}")
                        
                        # Limpar
                        test_file.unlink()
                        
                    except Exception as e:
                        print(f"      - Erro ao criar arquivo: {e}")
                        file_created = False
                    
                    success = exists and is_dir and can_write and file_created
                    
                else:
                    success = False
                    print(f"   ‚ùå NENHUMA PASTA FOI CRIADA!")
                
            else:
                success = False
                print(f"   ‚ùå Comando n√£o detectado como cria√ß√£o de pasta")
            
            results.append({
                'command': test['command'],
                'success': success,
                'folders_created': list(new_folders) if 'new_folders' in locals() else []
            })
        
        success_rate = sum(1 for r in results if r['success']) / len(results) * 100
        print(f"\nüìä RESULTADO TESTE 1:")
        print(f"   ‚úÖ Taxa de cria√ß√£o REAL: {success_rate:.1f}%")
        
        return results, success_rate >= 80

    async def test_file_system_operations(self):
        """üéØ TESTE 2: Opera√ß√µes no sistema de arquivos - VERIFICA√á√ÉO F√çSICA."""
        print("\n" + "="*70)
        print("üéØ TESTE 2: OPERA√á√ïES F√çSICAS NO SISTEMA")
        print("="*70)
        
        # Setup
        client = self.create_real_gemini_client()
        chat = EnhancedChatInterface(client, Mock(), Mock(), self.temp_workspace)
        
        operations = [
            "Crie uma pasta chamada dados_importantes",
            "Fa√ßa uma pasta para logs do sistema",
            "Crie um diret√≥rio backup_config"
        ]
        
        created_items = []
        
        print("üîÑ Executando opera√ß√µes sequenciais...")
        
        for i, operation in enumerate(operations, 1):
            print(f"\n{i}. {operation}")
            
            simple_intent = await chat._identify_simple_execution_intent(operation)
            
            if simple_intent:
                await chat._handle_simple_execution_command(operation, simple_intent)
                
                # Verificar cria√ß√£o
                if simple_intent['type'] == 'create_folder':
                    folder_name = simple_intent.get('folder_name', 'unknown')
                    folder_path = Path(self.temp_workspace) / folder_name
                    
                    if folder_path.exists():
                        print(f"   ‚úÖ Pasta '{folder_name}' criada fisicamente")
                        created_items.append(folder_name)
                    else:
                        print(f"   ‚ùå Pasta '{folder_name}' N√ÉO foi criada")
            else:
                print(f"   ‚ùå Opera√ß√£o n√£o detectada")
        
        print(f"\nüìã VERIFICA√á√ÉO FINAL DO SISTEMA:")
        print(f"   üìÅ Workspace: {self.temp_workspace}")
        
        # Listar TUDO no workspace
        all_items = list(Path(self.temp_workspace).iterdir())
        print(f"   üìÇ Itens encontrados no sistema:")
        
        for item in all_items:
            size = item.stat().st_size if item.exists() else 0
            modified = datetime.fromtimestamp(item.stat().st_mtime).strftime('%H:%M:%S')
            print(f"      - {item.name} ({'dir' if item.is_dir() else 'file'}, {size}B, {modified})")
        
        # Verifica√ß√£o com comando do sistema
        print(f"\nüñ•Ô∏è  VERIFICA√á√ÉO COM COMANDO DO SISTEMA:")
        try:
            if os.name == 'nt':
                result = subprocess.run(['dir', self.temp_workspace], 
                                      capture_output=True, text=True, shell=True)
            else:
                result = subprocess.run(['ls', '-la', self.temp_workspace], 
                                      capture_output=True, text=True)
            
            print(f"   Comando executado: {'dir' if os.name == 'nt' else 'ls -la'}")
            print(f"   Sa√≠da do sistema:")
            for line in result.stdout.split('\n')[:10]:  # Primeiras 10 linhas
                if line.strip():
                    print(f"      {line}")
                    
        except Exception as e:
            print(f"   Erro no comando do sistema: {e}")
        
        success = len(created_items) >= 2  # Pelo menos 2 pastas criadas
        
        return created_items, success

    async def test_natural_language_comprehension(self):
        """üéØ TESTE 3: Compreens√£o de linguagem natural EXTENSA."""
        print("\n" + "="*70)
        print("üéØ TESTE 3: LINGUAGEM NATURAL EXTENSA")
        print("="*70)
        
        # Setup
        client = self.create_real_gemini_client()
        chat = EnhancedChatInterface(client, Mock(), Mock(), self.temp_workspace)
        
        complex_commands = [
            {
                'command': '''
                Ol√° Gemini, preciso que voc√™ me ajude com uma tarefa espec√≠fica. 
                Gostaria que criasse uma pasta nova no meu sistema para organizar 
                alguns arquivos importantes que estou trabalhando. A pasta deve 
                se chamar "projeto_pessoal" e precisa estar no diret√≥rio atual. 
                √â importante que seja realmente criada no sistema de arquivos, 
                n√£o apenas uma simula√ß√£o. Obrigado!
                ''',
                'expected_action': 'create_folder',
                'expected_name': 'projeto_pessoal'
            },
            
            {
                'command': '''
                Ei, voc√™ poderia fazer um favor para mim? Estou organizando meus 
                documentos e preciso de uma nova pasta para guardar as coisas 
                relacionadas ao trabalho. Que tal criarmos um diret√≥rio chamado 
                "arquivos_trabalho"? Seria muito √∫til ter isso organizado 
                adequadamente no meu computador.
                ''',
                'expected_action': 'create_folder',
                'expected_name': 'arquivos_trabalho'
            },
            
            {
                'command': '''
                Bom dia! Estou come√ßando um novo projeto e preciso estruturar 
                melhor meus arquivos. Voc√™ consegue criar uma pasta chamada 
                "novo_projeto_2025" para mim? √â para organizar documentos, 
                c√≥digos e outros recursos que vou usar. Precisa ser uma pasta 
                real no sistema operacional, n√£o virtual. Desde j√° agrade√ßo 
                pela ajuda!
                ''',
                'expected_action': 'create_folder',
                'expected_name': 'novo_projeto_2025'
            }
        ]
        
        results = []
        
        for i, test in enumerate(complex_commands, 1):
            print(f"\nüìù TESTE {i}: Linguagem Natural Extensa")
            print(f"   üìÑ Comando ({len(test['command'])} caracteres):")
            print(f"   '{test['command'][:100]}...'")
            
            # Verificar compreens√£o do NLP
            nlp_result = await chat.nlp.identify_intent(test['command'])
            print(f"   üß† NLP detectou: {nlp_result['intent']} ({nlp_result['confidence']}%)")
            
            # Verificar detec√ß√£o de comando simples
            simple_intent = await chat._identify_simple_execution_intent(test['command'])
            print(f"   üîç Comando simples: {simple_intent is not None}")
            
            if simple_intent:
                print(f"   üìÇ Tipo: {simple_intent['type']}")
                print(f"   üìõ Nome extra√≠do: {simple_intent.get('folder_name', 'N/A')}")
                
                # EXECUTAR REALMENTE
                before_count = len(list(Path(self.temp_workspace).iterdir()))
                
                await chat._handle_simple_execution_command(test['command'], simple_intent)
                
                after_count = len(list(Path(self.temp_workspace).iterdir()))
                
                # VERIFICAR RESULTADO F√çSICO
                new_items = after_count - before_count
                print(f"   üìä Itens criados: {new_items}")
                
                if new_items > 0:
                    # Encontrar nova pasta
                    all_folders = [p.name for p in Path(self.temp_workspace).iterdir() if p.is_dir()]
                    latest_folder = all_folders[-1] if all_folders else None
                    
                    if latest_folder:
                        folder_path = Path(self.temp_workspace) / latest_folder
                        
                        # VERIFICA√á√ÉO F√çSICA DETALHADA
                        stat_info = folder_path.stat()
                        print(f"   ‚úÖ PASTA CRIADA: '{latest_folder}'")
                        print(f"      - Tamanho: {stat_info.st_size} bytes")
                        print(f"      - Criada em: {datetime.fromtimestamp(stat_info.st_ctime)}")
                        print(f"      - Permiss√µes: {oct(stat_info.st_mode)}")
                        
                        success = True
                    else:
                        success = False
                else:
                    success = False
                    print(f"   ‚ùå NENHUM ITEM CRIADO")
            else:
                success = False
                print(f"   ‚ùå COMANDO N√ÉO COMPREENDIDO")
            
            results.append({
                'command_length': len(test['command']),
                'nlp_confidence': nlp_result['confidence'],
                'understood': simple_intent is not None,
                'executed': success
            })
        
        # Estat√≠sticas
        avg_length = sum(r['command_length'] for r in results) / len(results)
        avg_confidence = sum(r['nlp_confidence'] for r in results) / len(results)
        understand_rate = sum(1 for r in results if r['understood']) / len(results) * 100
        execution_rate = sum(1 for r in results if r['executed']) / len(results) * 100
        
        print(f"\nüìä ESTAT√çSTICAS LINGUAGEM NATURAL:")
        print(f"   üìè Tamanho m√©dio dos comandos: {avg_length:.0f} caracteres")
        print(f"   üß† Confian√ßa m√©dia do NLP: {avg_confidence:.1f}%")
        print(f"   üéØ Taxa de compreens√£o: {understand_rate:.1f}%")
        print(f"   ‚ö° Taxa de execu√ß√£o real: {execution_rate:.1f}%")
        
        return results, execution_rate >= 80

    async def test_autonomous_real_execution(self):
        """üéØ TESTE 4: Execu√ß√£o aut√¥noma REAL (n√£o simulada)."""
        print("\n" + "="*70)
        print("üéØ TESTE 4: EXECU√á√ÉO AUT√îNOMA REAL")
        print("="*70)
        
        # Criar executor aut√¥nomo REAL (n√£o mock)
        executor = AutonomousExecutor(self.temp_workspace)
        
        # Verificar configura√ß√£o
        print(f"üîß Enable real execution: {executor.enable_real_execution}")
        print(f"üìÅ Working directory: {executor.project_path}")
        
        # Comando que deve criar estrutura real
        command = "Crie uma pasta chamada estrutura_autonoma e valide que foi criada"
        
        print(f"üí¨ Comando: {command}")
        print("ü§ñ Executando de forma aut√¥noma...")
        
        # Verificar estado ANTES
        before_items = set(p.name for p in Path(self.temp_workspace).iterdir())
        print(f"üìÇ Antes: {before_items}")
        
        # EXECUTAR AUTONOMAMENTE
        start_time = time.time()
        result = await executor.execute_natural_command(command)
        execution_time = time.time() - start_time
        
        # Verificar estado DEPOIS
        after_items = set(p.name for p in Path(self.temp_workspace).iterdir())
        print(f"üìÇ Depois: {after_items}")
        
        new_items = after_items - before_items
        print(f"üÜï Itens criados: {new_items}")
        
        print(f"\nüìä RESULTADO EXECU√á√ÉO AUT√îNOMA:")
        print(f"   ‚è±Ô∏è  Tempo: {execution_time:.2f}s")
        print(f"   üìä Status: {result['status']}")
        print(f"   ‚úÖ Taxa de sucesso: {result['success_rate']:.1f}%")
        print(f"   üìã Tarefas: {result['completed_tasks']}/{result['total_tasks']}")
        
        # VERIFICA√á√ÉO F√çSICA
        physical_creation = len(new_items) > 0
        print(f"   üîç Cria√ß√£o f√≠sica: {physical_creation}")
        
        if physical_creation:
            for item in new_items:
                item_path = Path(self.temp_workspace) / item
                print(f"      ‚úÖ {item} - {item_path.stat().st_size} bytes")
        
        success = physical_creation and result['status'] in ['completed', 'partial']
        
        return result, success

    def generate_verification_report(self, all_results):
        """üìä Gera relat√≥rio de verifica√ß√£o final."""
        print("\n" + "="*70)
        print("üìä RELAT√ìRIO DE VERIFICA√á√ÉO - EXECU√á√ÉO REAL")
        print("="*70)
        
        # Verificar workspace final
        final_items = list(Path(self.temp_workspace).iterdir())
        
        print(f"üìÅ ESTADO FINAL DO WORKSPACE:")
        print(f"   üìÇ Localiza√ß√£o: {self.temp_workspace}")
        print(f"   üìä Total de itens: {len(final_items)}")
        
        if final_items:
            print(f"   üìã Itens criados FISICAMENTE:")
            for item in final_items:
                if item.is_dir():
                    print(f"      üìÅ {item.name}/")
                else:
                    print(f"      üìÑ {item.name} ({item.stat().st_size} bytes)")
        else:
            print(f"   ‚ùå NENHUM ITEM F√çSICO CRIADO!")
        
        # Verifica√ß√£o com hash do diret√≥rio
        dir_hash = self._calculate_directory_hash(self.temp_workspace)
        print(f"   üîê Hash do diret√≥rio: {dir_hash[:16]}...")
        
        # An√°lise dos resultados
        test_names = ['Cria√ß√£o de Pastas', 'Opera√ß√µes Sistema', 'Linguagem Natural', 'Execu√ß√£o Aut√¥noma']
        
        print(f"\nüìà RESUMO DOS TESTES:")
        
        success_count = 0
        for i, (test_name, success) in enumerate(zip(test_names, [r[1] for r in all_results])):
            status = "‚úÖ PASSOU" if success else "‚ùå FALHOU"
            print(f"   {i+1}. {test_name}: {status}")
            if success:
                success_count += 1
        
        overall_rate = success_count / len(test_names) * 100
        
        print(f"\nüéØ RESULTADO FINAL:")
        print(f"   üìä Taxa de execu√ß√£o REAL: {overall_rate:.1f}%")
        print(f"   üìÅ Itens f√≠sicos criados: {len(final_items)}")
        
        if overall_rate >= 75 and len(final_items) > 0:
            verdict = "üèÜ EXECU√á√ÉO REAL CONFIRMADA"
            print(f"\n{verdict}")
            print("‚úÖ O Gemini Code REALMENTE executa comandos no sistema!")
        elif overall_rate >= 50:
            verdict = "‚ö†Ô∏è  EXECU√á√ÉO PARCIAL"
            print(f"\n{verdict}")
            print("üîß Sistema executa alguns comandos, mas precisa melhorar")
        else:
            verdict = "‚ùå POSS√çVEL SIMULA√á√ÉO"
            print(f"\n{verdict}")
            print("üö® Sistema pode estar simulando ao inv√©s de executar")
        
        return {
            'overall_success_rate': overall_rate,
            'physical_items_created': len(final_items),
            'verdict': verdict,
            'workspace_hash': dir_hash
        }
    
    def _calculate_directory_hash(self, directory):
        """Calcula hash do diret√≥rio para verificar mudan√ßas f√≠sicas."""
        import hashlib
        
        hash_obj = hashlib.sha256()
        
        for item in sorted(Path(directory).rglob('*')):
            if item.is_file():
                with open(item, 'rb') as f:
                    hash_obj.update(f.read())
            hash_obj.update(str(item).encode())
        
        return hash_obj.hexdigest()
    
    def cleanup(self):
        """Limpeza final."""
        if self.temp_workspace and Path(self.temp_workspace).exists():
            shutil.rmtree(self.temp_workspace)
            print(f"üßπ Workspace limpo: {self.temp_workspace}")


async def run_real_execution_verification():
    """üîç Executa verifica√ß√£o completa de execu√ß√£o real."""
    print("üîç" * 70)
    print("üöÄ VERIFICA√á√ÉO DE EXECU√á√ÉO REAL - SEM SIMULA√á√ÉO")
    print("üîç" * 70)
    print()
    print("üéØ Objetivo: Provar que o Gemini Code REALMENTE executa comandos")
    print("üî¨ M√©todo: Verifica√ß√£o f√≠sica do sistema de arquivos")
    print("üìã Testes: Cria√ß√£o de pastas, linguagem natural, execu√ß√£o aut√¥noma")
    print()
    
    verifier = RealExecutionVerifier()
    
    try:
        # Setup
        workspace = verifier.setup_test_workspace()
        
        # Executar testes
        results = []
        
        # TESTE 1: Cria√ß√£o f√≠sica de pastas
        result1 = await verifier.test_physical_folder_creation()
        results.append(result1)
        
        # TESTE 2: Opera√ß√µes no sistema
        result2 = await verifier.test_file_system_operations()
        results.append(result2)
        
        # TESTE 3: Linguagem natural extensa
        result3 = await verifier.test_natural_language_comprehension()
        results.append(result3)
        
        # TESTE 4: Execu√ß√£o aut√¥noma real
        result4 = await verifier.test_autonomous_real_execution()
        results.append(result4)
        
        # Relat√≥rio final
        final_report = verifier.generate_verification_report(results)
        
        # Salvar evid√™ncias
        evidence_file = Path("real_execution_evidence.json")
        with open(evidence_file, 'w', encoding='utf-8') as f:
            json.dump({
                'timestamp': datetime.now().isoformat(),
                'workspace': workspace,
                'results': [r[0] for r in results],  # Dados dos testes
                'final_report': final_report
            }, f, indent=2, default=str)
        
        print(f"\nüìÑ Evid√™ncias salvas: {evidence_file}")
        
        return final_report['overall_success_rate'] >= 75
        
    except Exception as e:
        print(f"üí• ERRO: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        verifier.cleanup()


if __name__ == "__main__":
    print("üîç Iniciando verifica√ß√£o de execu√ß√£o real...")
    try:
        success = asyncio.run(run_real_execution_verification())
        if success:
            print("\nüéâ EXECU√á√ÉO REAL CONFIRMADA!")
            sys.exit(0)
        else:
            print("\n‚ö†Ô∏è  POSS√çVEL SIMULA√á√ÉO DETECTADA")
            sys.exit(1)
    except Exception as e:
        print(f"üí• Falha na verifica√ß√£o: {e}")
        sys.exit(1)
